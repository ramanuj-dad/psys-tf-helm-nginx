apiVersion: batch/v1
kind: Job
metadata:
  name: nginx-ingress-deployment-ACTION_PLACEHOLDER
  namespace: deployment-automation
  labels:
    app: nginx-ingress-deployer
    action: ACTION_PLACEHOLDER
spec:
  ttlSecondsAfterFinished: 3600  # Clean up after 1 hour
  backoffLimit: 1
  template:
    metadata:
      labels:
        app: nginx-ingress-deployer
        action: ACTION_PLACEHOLDER
    spec:
      restartPolicy: Never
      containers:
      - name: deployer
        image: IMAGE_PLACEHOLDER
        imagePullPolicy: Always
        env:
        - name: ACTION
          value: "ACTION_PLACEHOLDER"
        - name: CLUSTER_IP
          valueFrom:
            configMapKeyRef:
              name: deployment-config
              key: cluster_ip
        command: ["/bin/bash"]
        args:
        - "-c"
        - |
          set -euo pipefail
          
          echo "üöÄ NGINX Ingress Controller Deployment Started"
          echo "=============================================="
          echo "Action: $ACTION"
          echo "Cluster IP: $CLUSTER_IP"
          echo "Image: IMAGE_PLACEHOLDER"
          echo "Date: $(date)"
          echo ""
          
          # Change to project directory
          cd /workspace
          
          # Show project structure
          echo "üìÅ Project Structure:"
          find . -type f -name "*.yaml" -o -name "*.yml" -o -name "*.tf" | head -20
          echo ""
          
          if [ "$ACTION" = "apply" ]; then
            echo "üèóÔ∏è  APPLYING NGINX Ingress Controller..."
            echo "======================================"
            
            # Apply Terraform first
            echo "1Ô∏è‚É£  Initializing Terraform..."
            cd terraform
            terraform init
            
            echo "2Ô∏è‚É£  Planning Terraform deployment..."
            terraform plan -var="cluster_ip=$CLUSTER_IP"
            
            echo "3Ô∏è‚É£  Applying Terraform changes..."
            terraform apply -auto-approve -var="cluster_ip=$CLUSTER_IP"
            cd ..
            
            # Apply Helm chart
            echo "4Ô∏è‚É£  Deploying NGINX Ingress with Helm..."
            helm upgrade --install nginx-ingress ./helm/nginx-ingress \
              --namespace ingress-nginx \
              --create-namespace \
              --set controller.service.type=NodePort \
              --set controller.service.nodePorts.http=30080 \
              --set controller.service.nodePorts.https=30443 \
              --wait --timeout=600s
            
            echo ""
            echo "‚úÖ NGINX Ingress Controller deployed successfully!"
            echo ""
            echo "üåê Access URLs:"
            echo "- HTTP:  http://$CLUSTER_IP/"
            echo "- HTTPS: https://$CLUSTER_IP/"
            echo "- NodePort HTTP:  http://$CLUSTER_IP:30080/"
            echo "- NodePort HTTPS: https://$CLUSTER_IP:30443/"
            echo ""
            echo "üìã Status:"
            kubectl get pods -n ingress-nginx
            kubectl get svc -n ingress-nginx
            
          elif [ "$ACTION" = "destroy" ]; then
            echo "üóëÔ∏è  DESTROYING NGINX Ingress Controller..."
            echo "======================================="
            
            # Remove Helm deployment
            echo "1Ô∏è‚É£  Removing Helm deployment..."
            helm uninstall nginx-ingress -n ingress-nginx || echo "‚ö†Ô∏è  Helm chart already removed"
            
            # Destroy Terraform resources
            echo "2Ô∏è‚É£  Destroying Terraform resources..."
            cd terraform
            terraform init
            terraform destroy -auto-approve -var="cluster_ip=$CLUSTER_IP" || echo "‚ö†Ô∏è  Some Terraform resources may have been manually removed"
            cd ..
            
            # Clean up namespace
            echo "3Ô∏è‚É£  Cleaning up namespace..."
            kubectl delete namespace ingress-nginx --ignore-not-found=true
            
            echo "‚úÖ NGINX Ingress Controller destroyed successfully!"
            
          else
            echo "‚ùå Unknown action: $ACTION"
            echo "Supported actions: apply, destroy"
            exit 1
          fi
          
          echo ""
          echo "üéâ Deployment job completed successfully!"
          echo "Date: $(date)"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: kubectl-config
          mountPath: /root/.kube
          readOnly: true
      volumes:
      - name: kubectl-config
        hostPath:
          path: /root/.kube
          type: Directory
      nodeSelector:
        kubernetes.io/hostname: psys-centos
