apiVersion: batch/v1
kind: Job
metadata:
  name: nginx-ingress-deployment-ACTION_PLACEHOLDER
  namespace: deployment-automation
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 0  # No retries on failure
  template:
    spec:
      serviceAccountName: nginx-ingress-deployer-admin
      restartPolicy: Never
      containers:
      - name: deployer
        image: IMAGE_PLACEHOLDER
        env:
        - name: ACTION
          value: "ACTION_PLACEHOLDER"
        command: ["/bin/bash", "-c"]
        args:
        - |
          # Exit immediately if any command fails
          set -e
          
          # Function to exit with error message
          function fail() {
            echo "❌ ERROR: $1"
            exit 1
          }
          
          echo "🚀 NGINX Ingress Deployment Started"
          
          # Validate environment variables
          [ -z "$ACTION" ] && fail "ACTION environment variable is not set"
          
          echo "Action: $ACTION"
          
          cd /workspace/terraform || fail "Could not change to terraform directory"
          
          if [ "$ACTION" = "apply" ]; then
            echo "📋 Initializing Terraform..."
            terraform init || fail "Terraform initialization failed"
            
            echo "📋 Planning Terraform deployment..."
            terraform plan || fail "Terraform plan failed"
            
            echo "📋 Applying Terraform configuration..."
            terraform apply -auto-approve || fail "Terraform apply failed"
            
            echo "📋 Terraform deployment completed!"
            terraform output || echo "No outputs available"
            
            echo "✅ Checking deployed resources..."
            kubectl get pods -n ingress-nginx || echo "No pods found in ingress-nginx namespace"
            kubectl get svc -n ingress-nginx || echo "No services found in ingress-nginx namespace"
            
          elif [ "$ACTION" = "destroy" ]; then
            echo "🗑️ Destroying infrastructure with Terraform..."
            terraform init || fail "Terraform initialization failed"
            terraform destroy -auto-approve || fail "Terraform destroy failed"
            echo "✅ Destruction completed!"
          else
            fail "Unknown action: $ACTION"
          fi
        # No volumeMounts needed as the Pod uses the service account for Kubernetes API access
